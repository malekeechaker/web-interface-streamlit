import streamlit as st
import pandas as pd
from prediction import load_model, make_predictions 

st.title("Pr√©diction de l'esp√®ce d'une fleur Iris üå∏")
st.write("""
    Cette application utilise un mod√®le d'apprentissage automatique pour pr√©dire l'esp√®ce d'une fleur
    Iris en fonction de la longueur et largeur de ses s√©pales et p√©tales.
""")

# Diviser en deux colonnes pour une meilleure pr√©sentation
col1, col2 = st.columns(2)

# Colonnes pour les sliders des caract√©ristiques de la fleur
with col1:
    sepal_length = st.slider("Longueur des s√©pales (cm)", 4.0, 8.0, 5.0)  # Slider pour la longueur des s√©pales
    sepal_width = st.slider("Largeur des s√©pales (cm)", 2.0, 4.5, 3.0)   # Slider pour la largeur des s√©pales

with col2:
    petal_length = st.slider("Longueur des p√©tales (cm)", 1.0, 7.0, 4.0)  # Slider pour la longueur des p√©tales
    petal_width = st.slider("Largeur des p√©tales (cm)", 0.1, 2.5, 1.0)   # Slider pour la largeur des p√©tales

model_path = "C:/Users/Home/Desktop/ids5/TP1_MLOPS_Streamlit/decision_tree_model.joblib"
model = load_model(model_path)

# √âtape 5 : Fonction pour lancer la pr√©diction
if st.button("Pr√©dire l'esp√®ce de la fleur"):
    # Cr√©er un DataFrame avec les caract√©ristiques d'entr√©e
    input_data = pd.DataFrame({
        "sepal_length": [sepal_length],
        "sepal_width": [sepal_width],
        "petal_length": [petal_length],
        "petal_width": [petal_width]
    })
    
    # Appel √† la fonction de pr√©diction (depuis prediction.py)
    prediction = make_predictions(model, input_data)

    # Afficher le r√©sultat de la pr√©diction
    st.success(f"L'esp√®ce pr√©dite est : {prediction[0]}")
